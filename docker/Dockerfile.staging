
FROM icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6 as ruby
SHELL ["/bin/bash", "-c"]

COPY scripts /scripts

RUN apt-get update && \
    apt-get -y install curl gnupg build-essential ruby-full git python3 python3-bs4 python3-lxml \
    nodejs libgdbm-dev libncurses5-dev automake libtool bison libffi-dev 

ENV BUILD_SCRIPTS_DIR /scripts/build
ENV STAGING_SITE=true
ENV PIPELINE_DEBUG_SCRIPT=true

RUN $BUILD_SCRIPTS_DIR/ruby_install.sh
#
#
#
FROM ruby as jekyll

COPY gems /gems
COPY robots.txt /
COPY src /src
#COPY scripts /scripts

#RUN ./scripts/builds/antora_build_ui.sh
#RUN $BUILD_SCRIPTS_DIR/antora_build_ui.sh
# RUN ./scripts/build/jekyll.sh
RUN $BUILD_SCRIPTS_DIR/jekyll.sh

#
#
#
#FROM jekyll as javadocs

#ENV BUILD_SCRIPTS_DIR /scripts/build
#ENV STAGING_SITE true

#RUN $BUILD_SCRIPTS_DIR/javadoc_clone.sh

#
#
#
#FROM javadocs as docs1
FROM jekyll as docs1

#ENV BUILD_SCRIPTS_DIR /scripts/build
#ENV STAGING_SITE true

RUN $BUILD_SCRIPTS_DIR/docs_part_1.sh

#
#
#
FROM docs1 as docs2

RUN $BUILD_SCRIPTS_DIR/docs_part_2.sh

#
#
#
FROM docs2 as docs3

#ENV BUILD_SCRIPTS_DIR /scripts/build
#ENV STAGING_SITE true

RUN $BUILD_SCRIPTS_DIR/gzip.sh

#
#
#
FROM icr.io/appcafe/open-liberty-devfile-stack:21.0.0.12 as war

COPY mvnw /
COPY .mvn /.mvn
COPY pom.xml /
COPY --from=docs3 --chown=1001:0 /src /src
COPY --from=docs3 --chown=1001:0 /target /target
RUN ./mvnw -B -Dhttps.protocols=TLSv1.2 package

#
#
#
FROM icr.io/appcafe/open-liberty:22.0.0.3-full-java8-openj9-ubi as runtime
ENV SEC_TLS_TRUSTDEFAULTCERTS true
COPY src/main/wlp/server.xml /config/server.xml
COPY --from=war --chown=1001:0 target/openliberty.war /config/apps/openliberty.war
